@inherits LayoutComponentBase
@using LagDaemon.YAMUD.Model
@using LagDaemon.YAMUD.WebClient.Components
@using LagDaemon.YAMUD.WebClient.Pages
@using LagDaemon.YAMUD.WebClient.Services
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocalStorageService LocalStorageService
@inject IAuthenticationService AuthenticationService
@inject HttpClient HttpClient
@inject ChatService ChatService
@inject CommandService CommandService


<CascadingAuthenticationState>
    <div class="body-background page">
        <main>
            <AuthorizeView>
                <Authorized>
                    <div class="d-flex flex-column">
                        <div class="container-fluid">
                            <NavMenu />
                        </div>
                        <div class="d-flex flex-row">
                            <div class="sidebar">
                                <ChatComponent />
                            </div>
                            <div class="container-lg">
                                @Body
                            </div>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <h1>Please log in to access this page.</h1>
                    <LoginForm />
                </NotAuthorized>
            </AuthorizeView>
        </main>
    </div>
</CascadingAuthenticationState>

@code {
    public bool UserIsLoggedIn = false;
    private UserAccountRoles userRole;
    public string DisplayName { get; set; } = String.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorageService.GetObjectAsync<string>("authToken");

            UserIsLoggedIn = token.ExpirationTime > DateTime.Now;

            if (UserIsLoggedIn)
            {
                AuthenticationService.Authorize(token.Item);
                await ChatService.ConnectAsync(token.Item);
                await CommandService.ConnectAsync(token.Item);
            }
        }
        catch (Exception ex)
        {
            UserIsLoggedIn = false;
        }
        StateHasChanged();
    }
}
