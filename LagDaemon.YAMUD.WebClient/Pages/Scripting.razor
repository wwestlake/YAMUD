@page "/scripting"
@using LagDaemon.YAMUD.Model.Scripting
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@using LagDaemon.YAMUD.WebClient.Services
@inject IJSRuntime jsRuntime
@inject IScriptingModuleService ScriptingModuleService

<h3>Code Editor</h3>

<div class="container-fluid">
    <div class="row">
        <!-- Left side: List of available scripts -->
        <div class="col-4">
            <h4>Available Scripts</h4>
            <ul class="list-group">
                @foreach (var script in scripts)
                {
                    <li class="list-group-item @(IsScriptSelected(script) ? "selected" : "")" @onclick="() => LoadScript(script)">
                        @script.Name
                    </li>
                }
            </ul>
        </div>

        <!-- Right side: Code editor form -->
        <div class="col-8">
            <form @oninput="OnFormInput">
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
                    <button type="button" class="btn btn-primary" @onclick="NewScript">New Script</button>
                </div>
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" class="form-control" id="name" @bind="module.Name" />
                </div>

                <div class="form-group">
                    <label for="code">Code:</label>
                    <div>
                        <StandaloneCodeEditor CssClass="editor-class" @ref="_editor" Id="module-code-editor" ConstructionOptions="EditorConstructionOptions" />
                    </div>
                </div>

                <div class="form-group">
                    <label for="language">Language:</label>
                    <select class="form-control" id="language" @bind="module.Language">
                        @foreach (var language in Enum.GetValues(typeof(SupportedCodeLanguages)))
                        {
                            <option value="@language">@language</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="description">Description:</label>
                    <textarea class="form-control" id="description" rows="3" @bind="module.Description"></textarea>
                </div>

                <div class="form-group">
                    <label for="version">Version:</label>
                    <input type="text" class="form-control" id="version" @bind="module.Version" />
                </div>

                <div class="form-group">
                    <label for="license">License:</label>
                    <input type="text" class="form-control" id="license" @bind="module.License" />
                </div>
            </form>
        </div>
    </div>
</div>

@code {
    private List<Module> scripts = new List<Module>();
    private Module module = new Module();
    private StandaloneCodeEditor _editor = null!;
    private string _valueToSet = "";
    private bool isNewModule = true;
    private bool unsavedChanges = false;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                Language = "python",
                GlyphMargin = true,
                Value = ""
            };
    }

    private bool IsScriptSelected(Module script)
    {
        return module != null && module.Id == script.Id;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        scripts = (await ScriptingModuleService.GetAllModules()).ToList();
        await BlazorMonaco.Editor.Global.SetTheme(jsRuntime, "vs-dark");
    }

    private async Task EditorOnDidInit()
    {

        await _editor.AddCommand((int)KeyMod.CtrlCmd | (int)KeyCode.KeyH, (args) =>
        {
            Console.WriteLine("Ctrl+H : Initial editor command is triggered.");
        });

        var newDecorations = new ModelDeltaDecoration[]
        {
            new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(3,1,3,1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = "decorationContentClass",
                    GlyphMarginClassName = "decorationGlyphMarginClass"
                }
            }
        };
    }

    // Load the script into the form
    private async Task LoadScript(Module script)
    {
        if (unsavedChanges)
        {
            // Prompt user to confirm before loading new script
            var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "You have unsaved changes. Are you sure you want to load a new script?");
            if (!confirmed)
            {
                return; // Don't load script if user cancels
            }
        }
        module = script;
        await _editor.SetValue(script.Code); // Set code in the editor
        isNewModule = false;
        StateHasChanged();
        unsavedChanges = false;
    }


    private async Task Save()
    {
        // Here you can implement the logic to save the module
        // For example, call a service method to save the module to the database
        var code = await _editor.GetValue(); // Get code from the editor
        module.Code = code; // Assign code to the module

        if (isNewModule)
        {
            await ScriptingModuleService.CreateNewModule(module);
        } else
        {
            await ScriptingModuleService.UpdateModule(module);
        }
        StateHasChanged();
        unsavedChanges = false;
    }


    private void OnFormInput()
    {
        // Set flag to true when form input changes
        unsavedChanges = true;
    }

    private async Task NewScript()
    {
        if (unsavedChanges)
        {
            // Prompt user to confirm before loading new script
            var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "You have unsaved changes. Are you sure you want to create a new script?");
            if (!confirmed)
            {
                return; // Don't load script if user cancels
            }
        }
        module = new Module();
        await _editor.SetValue(string.Empty);
        isNewModule = true;
        StateHasChanged();
    }
}