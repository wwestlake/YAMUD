<!-- LoginForm.razor -->
@page "/login"
@using LagDaemon.YAMUD.WebClient.Services
@using LagDaemon.YAMUD.WebClient.Model
@using System.Text.Json
@using System.Text
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt
@using LagDaemon.YAMUD.Model

@inject ILocalStorageService LocalStorageService
@inject IAuthenticationService AuthenticationService
@inject HttpClient HttpClient
@inject ILogger<LoginForm> logger

<div class="modal"  role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login</h5>
            </div>
            <div class="modal-body">
                <!-- Login form content -->
                <div class="form-group">
                    <label for="userIdOrEmail">UserID/Email:</label>
                    <input type="text" class="form-control" id="userIdOrEmail" @bind="UserIdOrEmail" />
                </div>
                <div class="form-group">
                    <label for="password">Password:</label>
                    <input type="password" class="form-control" id="password" @bind="Password" />
                </div>
                <div class="form-group">
                    <label for="apiUrl">Games WebAPI URL:</label>
                    <input type="text" class="form-control" id="apiUrl" @bind="ApiUrl" />
                </div>
                <div class="form-group form-check">
                    <input type="checkbox" class="form-check-input" id="rememberMe" @bind="RememberMe" />
                    <label class="form-check-label" for="rememberMe">Remember Me</label>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="Login">Login</button>
                <button type="button" class="btn btn-primary" @onclick="CreateAccount">Create Account</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool UserIsLoggedIn { get; set; } = false;

    [Parameter]
    public string DisplayName { get; set; } = String.Empty;

    private AuthToken? authToken;
    private string? UserIdOrEmail;
    private string? Password;
    private string? ApiUrl;
    private bool RememberMe;
    private UserAccountRoles userRole;

    protected override async Task OnInitializedAsync()
    {
        UserIsLoggedIn = false;
    }


    private async Task GetClaims(string tokenStr)
    {
        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(tokenStr);
        var displayNameClaim = token.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
        if (displayNameClaim != null)
        {
            // User's role found, update userRole variable
            DisplayName = displayNameClaim.Value;
        }

        // Access the claims from the token
        var roleClaim = token.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role);
        if (roleClaim != null)
        {
            // User's role found, update userRole variable
            userRole = Enum.Parse<UserAccountRoles>(roleClaim.Value);
        }
    }

    private async Task Login()
    {
        var authenticationRequest = new
        {
            emailAddress = UserIdOrEmail,
            password = Password
        };


        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7214/api/UserAccount/Authenticate");
        request.Content = new StringContent(JsonSerializer.Serialize(authenticationRequest), Encoding.UTF8, "application/json");

        var response = await HttpClient.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            authToken = JsonSerializer.Deserialize<AuthToken>(responseContent);

            try
            {
                GetClaims(authToken.token);
            }
            catch (Exception ex)
            {
                logger.Log(LogLevel.Warning, ex, "Failed to capture claims from JWT Token");
            }

            // Save token to local storage
            await LocalStorageService.SetObjectAsync("authToken", authToken.token);

            AuthenticationService.AuthToken = authToken;

            UserIsLoggedIn = true;
        }
        else
        {
            // Authentication failed, handle error
        }
    }

    private void CreateAccount()
    {
        // Implement login logic here
    }
}
